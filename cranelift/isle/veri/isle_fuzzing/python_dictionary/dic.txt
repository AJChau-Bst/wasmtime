"jump",
"#,
"ScalarTruthy",
"A scalar truthy type",
"brz",
"#,
"brnz",
"#,
"i32",
"A 32 bit scalar integer type",
"br_table",
"#,
"iAddr",
"An integer address type",
"debugtrap",
"#,
"trap",
"#,
"trapz",
"#,
"resumable_trap",
"#,
"trapnz",
"#,
"resumable_trapnz",
"#,
"return",
"#,
"call",
"#,
"call_indirect",
"#,
"func_addr",
"#,
"TxN",
"A SIMD vector type",
"splat",
"#,
"I8x16",
"A SIMD vector type consisting of 16 lanes of 8-bit integers",
"swizzle",
"#,
"insertlane",
"#,
"extractlane",
"#,
"Int",
"A scalar or vector integer type",
"smin",
"#,
"umin",
"#,
"smax",
"#,
"umax",
"#,
"IxN",
"A SIMD vector type containing integers",
"avg_round",
"#,
"uadd_sat",
"#,
"sadd_sat",
"#,
"usub_sat",
"#,
"ssub_sat",
"#,
"Int",
"A scalar or vector integer type",
"NarrowInt",
"An integer type with lanes type to `i64`",
"ScalarTruthy",
"A scalar truthy type",
"iB",
"A scalar integer type",
"iSwappable",
"A multi byte scalar integer type",
"iAddr",
"An integer address type",
"Ref",
"A scalar reference type",
"TxN",
"A SIMD vector type",
"Any",
"Any integer, float, or reference scalar or vector type",
"Mem",
"Any type that can be stored in memory",
"load",
"#,
"store",
"#,
"iExt8",
"An integer type with more than 8 bits",
"uload8",
"#,
"sload8",
"#,
"istore8",
"#,
"iExt16",
"An integer type with more than 16 bits",
"uload16",
"#,
"sload16",
"#,
"istore16",
"#,
"iExt32",
"An integer type with more than 32 bits",
"uload32",
"#,
"sload32",
"#,
"istore32",
"#,
"I16x8",
"A SIMD vector with exactly 8 lanes of 16-bit values",
"uload8x8",
"#,
"sload8x8",
"#,
"I32x4",
"A SIMD vector with exactly 4 lanes of 32-bit values",
"uload16x4",
"#,
"sload16x4",
"#,
"I64x2",
"A SIMD vector with exactly 2 lanes of 64-bit values",
"uload32x2",
"#,
"sload32x2",
"#,
"stack_load",
"#,
"stack_store",
"#,
"stack_addr",
"#,
"dynamic_stack_load",
"#,
"dynamic_stack_store",
"#,
"dynamic_stack_addr",
"#,
"global_value",
"#,
"symbol_value",
"#,
"tls_value",
"#,
"get_pinned_reg",
"#,
"set_pinned_reg",
"#,
"get_frame_pointer",
"#,
"get_stack_pointer",
"#,
"get_return_address",
"#,
"TableOffset",
"An unsigned table offset",
"table_addr",
"#,
"iconst",
"#,
"f32const",
"#,
"f64const",
"#,
"vconst",
"#,
"Tx16",
"A SIMD vector with exactly 16 lanes of 8-bit values; eventually this may support other \
"shuffle",
"#,
"null",
"#,
"nop",
"#,
"select",
"#,
"select_spectre_guard",
"#,
"bitselect",
"#,
"vselect",
"#,
"vany_true",
"#,
"vall_true",
"#,
"vhigh_bits",
"#,
"icmp",
"#,
"icmp_imm",
"#,
"iadd",
"#,
"isub",
"#,
"ineg",
"#,
"iabs",
"#,
"imul",
"#,
"umulhi",
"#,
"smulhi",
"#,
"I16or32",
"A scalar or vector integer type with 16- or 32-bit numbers",
"sqmul_round_sat",
"#,
"udiv",
"#,
"sdiv",
"#,
"urem",
"#,
"srem",
"#,
"iadd_imm",
"#,
"imul_imm",
"#,
"udiv_imm",
"#,
"sdiv_imm",
"#,
"urem_imm",
"#,
"srem_imm",
"#,
"irsub_imm",
"#,
"iadd_cin",
"#,
"iadd_cout",
"#,
"iadd_carry",
"#,
"i32_64",
"A 32 or 64-bit scalar integer type",
"uadd_overflow_trap",
"#,
"isub_bin",
"#,
"isub_bout",
"#,
"isub_borrow",
"#,
"bits",
"Any integer, float, or vector type",
"band",
"#,
"bor",
"#,
"bxor",
"#,
"bnot",
"#,
"band_not",
"#,
"bor_not",
"#,
"bxor_not",
"#,
"band_imm",
"#,
"bor_imm",
"#,
"bxor_imm",
"#,
"rotl",
"#,
"rotr",
"#,
"rotl_imm",
"#,
"rotr_imm",
"#,
"ishl",
"#,
"ushr",
"#,
"sshr",
"#,
"ishl_imm",
"#,
"ushr_imm",
"#,
"sshr_imm",
"#,
"bitrev",
"#,
"clz",
"#,
"cls",
"#,
"ctz",
"#,
"bswap",
"#,
"popcnt",
"#,
"Float",
"A scalar or vector floating point number",
"fcmp",
"#,
"fadd",
"#,
"fsub",
"#,
"fmul",
"#,
"fdiv",
"#,
"sqrt",
"#,
"fma",
"#,
"fneg",
"#,
"fabs",
"#,
"fcopysign",
"#,
"fmin",
"#,
"fmin_pseudo",
"#,
"fmax",
"#,
"fmax_pseudo",
"#,
"ceil",
"#,
"floor",
"#,
"trunc",
"#,
"nearest",
"#,
"is_null",
"#,
"is_invalid",
"#,
"bitcast",
"#,
"scalar_to_vector",
"#,
"Truthy",
"A scalar or vector whose values are truthy",
"IntTo",
"An integer type with the same number of lanes",
"bmask",
"#,
"Int",
"A scalar integer type",
"IntTo",
"A smaller integer type",
"ireduce",
"#,
"I16or32or64xN",
"A SIMD vector type containing integer lanes 16, 32, or 64 bits wide",
"snarrow",
"#,
"unarrow",
"#,
"uunarrow",
"#,
"I8or16or32xN",
"A SIMD vector type containing integer lanes 8, 16, or 32 bits wide.",
"swiden_low",
"#,
"swiden_high",
"#,
"uwiden_low",
"#,
"uwiden_high",
"#,
"iadd_pairwise",
"#,
"I16x8",
"A SIMD vector type containing 8 integer lanes each 16 bits wide.",
"widening_pairwise_dot_product_s",
"#,
"IntTo",
"A larger integer type with the same number of lanes",
"uextend",
"#,
"sextend",
"#,
"FloatTo",
"A scalar or vector floating point number",
"fpromote",
"#,
"fdemote",
"#,
"F64x2",
"A SIMD vector type consisting of 2 lanes of 64-bit floats",
"F32x4",
"A SIMD vector type consisting of 4 lanes of 32-bit floats",
"fvdemote",
"#,
"fvpromote_low",
"#,
"FloatScalar",
"A scalar only floating point number",
"fcvt_to_uint",
"#,
"fcvt_to_sint",
"#,
"fcvt_to_uint_sat",
"#,
"fcvt_to_sint_sat",
"#,
"Int",
"A scalar or vector integer type",
"fcvt_from_uint",
"#,
"fcvt_from_sint",
"#,
"fcvt_low_from_sint",
"#,
"WideInt",
"An integer type with lanes from `i16` upwards",
"isplit",
"#,
"iconcat",
"#,
"AtomicMem",
"Any type that can be stored in memory, which can be used in an atomic operation",
"atomic_rmw",
"#,
"atomic_cas",
"#,
"atomic_load",
"#,
"atomic_store",
"#,
"fence",
"#,
"TxN",
"A dynamic vector type",
"extract_vector",
"#,
